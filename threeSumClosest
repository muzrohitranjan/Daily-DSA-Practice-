class Solution {
    public int threeSumClosest(int[] nums, int target) {
        Arrays.sort(nums); // Sort the array to use the two-pointer technique
        int closestSum = Integer.MAX_VALUE; // Initialize with a large value
        int n = nums.length;

        for (int i = 0; i < n - 2; i++) {
            int left = i + 1;         // Second pointer starts after i
            int right = n - 1;        // Third pointer starts from the end

            while (left < right) {
                int currentSum = nums[i] + nums[left] + nums[right];

                // If exact match found, return immediately
                if (currentSum == target) {
                    return currentSum;
                }

                // Update closestSum if this one is closer to target
                if (Math.abs(currentSum - target) < Math.abs(closestSum - target)) {
                    closestSum = currentSum;
                }

                // Move pointers based on comparison with target
                if (currentSum > target) {
                    right--;
                } else {
                    left++;
                }
            }
        }

        return closestSum;
    }
}
