class Solution {
    private List<String> ans = new ArrayList<>();
    private int n;

    public List<String> generateParenthesis(int n) {
        this.n = n;
        dfs(0, 0, new StringBuilder());
        return ans;
    }

    private void dfs(int open, int close, StringBuilder sb) {
        if (open > n || close > open) return;

        if (open == n && close == n) {
            ans.add(sb.toString());
            return;
        }

        sb.append('(');
        dfs(open + 1, close, sb);
        sb.deleteCharAt(sb.length() - 1);  // backtrack

        sb.append(')');
        dfs(open, close + 1, sb);
        sb.deleteCharAt(sb.length() - 1);  // backtrack
    }
}
